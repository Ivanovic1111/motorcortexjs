The iteration on the CMS file starts.
The first thing to do is to identify the globals and store them on the globals array of the MC object.
While iterating to each of the nodes, first we work with the top layer nodes.

TOP LAYER NODES
1. The selector part is been analysed.

We identify the following:
a) The actual selection query string
b) The restrictions (if any) that apply to this directive
c) The event name that triggers the node's behavior

The format that we expect is the following:
selectionString:restriction1:restriction2:...:restrictionN:eventName
So we try to identify the validity of the syntax following the steps:
1. We split the string to an array on the ":" character
2. This array should be at least of length 2
3. The first part of the array should be the jQuery sector. We do not make any checks on this
4. The last part of the array is the event name. We check the validity of the name using the eventNameRegex
5. Any parts in between the first and last part are restrictions. The supported restrictions are:
- triggeringElement // which is used when we want to define behavior only to the element that actually triggered the event or it wraps it
- mc selection string
- not(mc selection string) // not is used in order to exclude elements based on specific attributes of it. The most common use is
  - not("triggeringElement") // this is the only syntax that we can accept a plain string within the parenthesis
  - not(mc selection string)
   mc selections strings are strings that will be used from the library in order to perform sophisticated selection
   functionality in various parts of the code. This strings should always return true or false (should define an expression
   that will return true or false).
   The mc selection strings can include both:
   - mc variables (like globals, dynamically passed or dom specific vars)
   - math operators
   The syntax of the mc selection strings is exactly as any math operation / comparison
How it works:
    The system analyses the selection part. It passes the restrictions (all of them) to the step selection function
    generator which returns a selector function. The "selector functions" are functions that select elements according
    to the selection part of each MC selection string.
6. The next thing to do is to define what the elements that apply to the sector function will do. It's time to analyse
the properties of the node.
We take it one by one. If there is any of "duration", "easing", "delay", "complete", "loop" then it treats them on
the "options" array (to pass it to the newly created function that uses velocity. If not it puts it to the parameters
one.
While checking the params of the node is very important to check if the parameters are of type object or string. Because
if they are of type object that means that we have an inner LESS-like element that has it's own behavior during this step.
That means a new thread!
We take the object parameter, we isolate it from the current routine and start a new one with all the options of the
parent node inherited or overwritten by its own. The new step function that we'll get is of the same weight with the
parent node's one.
Threads are used to provide a way of sequentially execute the one directive after the other. Each thread, in each step
 might have more than one execution functions. During the execution function creation mechanism there should be a
 callback handler. This callback handler should know the exact functions that should run and wait for all them to finish
 before proceeding to the next call.
The next most important parameter is "complete". If the "complete" parameter is present then that means that after the
completion of the first step we must execute an other one. It's time to proceed with the secondary (internal) nodes.
For the internal nodes we execute the exact same routine though this time there are two major differences.
 On step 1 we don't expect an array of length at least 2 but in this case just 1 is fine as there should NOT be an
 event name on the end of it. That means that we don't execute step 6.
7. Having created the selector function of the top node we have created the first ingredient of the first step function of the
Thread. But now let's talk about the "Thread". As we are on the top layer of nodes we try to identify the distinct events
that the page will support. So, at this step this is exactly what we'll do.
The system checks if there is an Event object with the same name on the events array of the lib. If there is not,
it creates it. If there is it does nothing at this point.
Though, what the top node describes is a Thread, not an event. Is a thread that should by executed whenever an Event
that owns it gets triggered by the library. So, we have to create the Thread.
We create a thread object.


For each node a ThreadCollection is been created. A ThreadCollection class has an array of Threads.
Each ThreadCollection object has a CallbackHandler object which has access to the parent ThreadCollection
object.
The CallbackHandler object listens to the "end" signal of each ThreadCollection Thread. That means that each
Thread object retains a variable that is the reference to the ThreadCollection object.
During creation of objects:
- The ThreadCollection creates its threads and puts them in an array one by one.
-





